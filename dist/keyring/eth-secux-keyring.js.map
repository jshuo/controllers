{"version":3,"file":"eth-secux-keyring.js","sourceRoot":"","sources":["../../src/keyring/eth-secux-keyring.js"],"names":[],"mappings":"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","sourcesContent":["const { EventEmitter } = require('events');\nconst ethUtil = require('ethereumjs-util');\n// const HDKey = require('hdkey');\nconst SecuxConnect = null;\nconst { TransactionFactory } = require('@ethereumjs/tx');\n\nconst hdPathString = `m/44'/60'/0'/0`;\nconst keyringType = 'Secux Hardware';\nconst pathBase = 'm';\nconst MAX_INDEX = 1000;\nconst DELAY_BETWEEN_POPUPS = 1000;\n\nfunction wait(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nexport class SecuxKeyring extends EventEmitter {\n  constructor(opts = {}) {\n    super();\n    this.type = keyringType;\n    this.accounts = [];\n    this.hdk = null;\n    this.page = 0;\n    this.perPage = 5;\n    this.unlockedAccount = 0;\n    this.paths = {};\n    this.device = opts.device\n    this.deserialize(opts);\n    // SecuxConnect.manifest(Secux_CONNECT_MANIFEST);\n  }\n\n  serialize() {\n    return Promise.resolve({\n      hdPath: this.hdPath,\n      accounts: this.accounts,\n      page: this.page,\n      paths: this.paths,\n      perPage: this.perPage,\n      unlockedAccount: this.unlockedAccount,\n    });\n  }\n\n  deserialize(opts = {}) {\n    this.hdPath = opts.hdPath || hdPathString;\n    this.accounts = opts.accounts || [];\n    this.page = opts.page || 0;\n    this.perPage = opts.perPage || 5;\n    return Promise.resolve();\n  }\n\n  isUnlocked() {\n    return Boolean(this.hdk && this.hdk.publicKey);\n  }\n\n  unlock() {\n    if (this.isUnlocked()) {\n      return Promise.resolve('already unlocked');\n    }\n    return new Promise((resolve, reject) => {\n      SecuxConnect.getPublicKey({\n        path: this.hdPath,\n        coin: 'ETH',\n      })\n        .then((response) => {\n          if (response.success) {\n            this.hdk.publicKey = Buffer.from(response.payload.publicKey, 'hex');\n            this.hdk.chainCode = Buffer.from(response.payload.chainCode, 'hex');\n            resolve('just unlocked');\n          } else {\n            reject(\n              new Error(\n                (response.payload && response.payload.error) || 'Unknown error',\n              ),\n            );\n          }\n        })\n        .catch((e) => {\n          reject(new Error((e && e.toString()) || 'Unknown error'));\n        });\n    });\n  }\n\n  setAccountToUnlock(index) {\n    this.unlockedAccount = parseInt(index, 10);\n  }\n\n  addAccounts(n = 1) {\n    return new Promise((resolve, reject) => {\n      this.unlock()\n        .then((_) => {\n          const from = this.unlockedAccount;\n          const to = from + n;\n\n          for (let i = from; i < to; i++) {\n            const address = this._addressFromIndex(pathBase, i);\n            if (!this.accounts.includes(address)) {\n              this.accounts.push(address);\n            }\n            this.page = 0;\n          }\n          resolve(this.accounts);\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n\n  getFirstPage() {\n    this.page = 0;\n    return this.__getPage(1);\n  }\n\n  getNextPage() {\n    return this.__getPage(1);\n  }\n\n  getPreviousPage() {\n    return this.__getPage(-1);\n  }\n\n  __getPage(increment) {\n    this.page += increment;\n\n    if (this.page <= 0) {\n      this.page = 1;\n    }\n\n    return new Promise((resolve, reject) => {\n      this.unlock()\n        .then((_) => {\n          const from = (this.page - 1) * this.perPage;\n          const to = from + this.perPage;\n\n          const accounts = [];\n\n          for (let i = from; i < to; i++) {\n            const address = this._addressFromIndex(pathBase, i);\n            accounts.push({\n              address,\n              balance: null,\n              index: i,\n            });\n            this.paths[ethUtil.toChecksumAddress(address)] = i;\n          }\n          resolve(accounts);\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n\n  getAccounts() {\n    this.accounts = [\"0xfc10126e2f41cbb264bceee6c6093133aa45f317\"];\n    console.log( this.accounts.slice())\n    // return this.accounts.slice()\n    return Promise.resolve(this.accounts.slice());\n  }\n\n  removeAccount(address) {\n    if (\n      !this.accounts.map((a) => a.toLowerCase()).includes(address.toLowerCase())\n    ) {\n      throw new Error(`Address ${address} not found in this keyring`);\n    }\n    this.accounts = this.accounts.filter(\n      (a) => a.toLowerCase() !== address.toLowerCase(),\n    );\n  }\n\n  // tx is an instance of the ethereumjs-transaction class.\n  signTransaction(address, tx) {\n    // const privKeyStr = \"df0bca5a38585f82036736aac53a5517392118795e96d243eb9356a899b144de\"\n    // const privKey = Buffer.from(privKeyStr, 'hex')\n    // const msgHash = tx.getMessageToSign(true)\n    // console.log(msgHash.toString('hex'))\n    // const signedTx = tx.sign(privKey)\n    // // Newer versions of Ethereumjs-tx are immutable and return a new tx object\n    // return Promise.resolve(signedTx === undefined ? tx : signedTx)\n    // const { v, r, s } = ethUtil.ecsign(msgHash, privKey)\n    // tx.r = Buffer.from(r, 'hex');\n    // tx.s = Buffer.from(s, 'hex');\n    // let txv;\n    // if (tx.chainId > 0) {\n    //   txv = v + tx.chainId * 2 + 8;\n    // }\n    // tx.v = Buffer.from(new Uint8Array([txv]), 'hex');\n    // Newer versions of Ethereumjs-tx are immutable and return a new tx object\n\n    // transactions built with older versions of ethereumjs-tx have a\n    // getChainId method that newer versions do not. Older versions are mutable\n    // while newer versions default to being immutable. Expected shape and type\n    // of data for v, r and s differ (Buffer (old) vs BN (new))\n    if (typeof tx.getChainId === 'function') {\n      // In this version of ethereumjs-tx we must add the chainId in hex format\n      // to the initial v value. The chainId must be included in the serialized\n      // transaction which is only communicated to ethereumjs-tx in this\n      // value. In newer versions the chainId is communicated via the 'Common'\n      // object.\n      return this._signTransaction(address, tx.getChainId(), tx, (payload) => {\n        tx.v = Buffer.from(payload.v, 'hex');\n        tx.r = Buffer.from(payload.r, 'hex');\n        tx.s = Buffer.from(payload.s, 'hex');\n        return tx;\n      });\n    }\n    // For transactions created by newer versions of @ethereumjs/tx\n    // Note: https://github.com/ethereumjs/ethereumjs-monorepo/issues/1188\n    // It is not strictly necessary to do this additional setting of the v\n    // value. We should be able to get the correct v value in serialization\n    // if the above issue is resolved. Until then this must be set before\n    // calling .serialize(). Note we are creating a temporarily mutable object\n    // forfeiting the benefit of immutability until this happens. We do still\n    // return a Transaction that is frozen if the originally provided\n    // transaction was also frozen.\n    const unfrozenTx = TransactionFactory.fromTxData(tx.toJSON(), {\n      common: tx.common,\n      freeze: false,\n    });\n    unfrozenTx.v = new ethUtil.BN(\n      ethUtil.addHexPrefix(tx.common.chainId()),\n      'hex',\n    );\n    return this._signTransaction(\n      address,\n      tx.common.chainIdBN().toNumber(),\n      unfrozenTx,\n      (payload) => {\n        // Because tx will be immutable, first get a plain javascript object that\n        // represents the transaction. Using txData here as it aligns with the\n        // nomenclature of ethereumjs/tx.\n        const txData = tx.toJSON();\n        // The fromTxData utility expects v,r and s to be hex prefixed\n        txData.v = ethUtil.addHexPrefix(payload.v);\n        txData.r = ethUtil.addHexPrefix(payload.r);\n        txData.s = ethUtil.addHexPrefix(payload.s);\n        // Adopt the 'common' option from the original transaction and set the\n        // returned object to be frozen if the original is frozen.\n        return TransactionFactory.fromTxData(txData, {\n          common: tx.common,\n          freeze: Object.isFrozen(tx),\n        });\n      },\n    );\n  }\n\n  // tx is an instance of the ethereumjs-transaction class.\n  async _signTransaction(address, chainId, tx, handleSigning) {\n    try {\n      // const status = await this.unlock();\n      // await wait(status === 'just unlocked' ? DELAY_BETWEEN_POPUPS : 0);\n      console.log('eth-secux-keyring')\n      const response = await this.device.ethereumSignTransaction({\n        path: this._pathFromAddress(address),\n        transaction: {\n          to: this._normalize(tx.to),\n          value: this._normalize(tx.value),\n          data: this._normalize(tx.data),\n          chainId,\n          nonce: this._normalize(tx.nonce),\n          gasLimit: this._normalize(tx.gasLimit),\n          gasPrice: this._normalize(tx.gasPrice),\n        },\n      });\n      if (response.success) {\n        const newOrMutatedTx = handleSigning(response.payload);\n\n        const addressSignedWith = ethUtil.toChecksumAddress(\n          ethUtil.addHexPrefix(\n            newOrMutatedTx.getSenderAddress().toString('hex'),\n          ),\n        );\n        const correctAddress = ethUtil.toChecksumAddress(address);\n        if (addressSignedWith !== correctAddress) {\n          throw new Error(\"signature doesn't match the right address\");\n        }\n\n        return newOrMutatedTx;\n      }\n      throw new Error(\n        (response.payload && response.payload.error) || 'Unknown error',\n      );\n    } catch (e) {\n      throw new Error((e && e.toString()) || 'Unknown error');\n    }\n  }\n\n  signMessage(withAccount, data) {\n    return this.signPersonalMessage(withAccount, data);\n  }\n\n  // For personal_sign, we need to prefix the message:\n  signPersonalMessage(withAccount, message) {\n    return new Promise((resolve, reject) => {\n      this.unlock()\n        .then((status) => {\n          setTimeout(\n            (_) => {\n              SecuxConnect.ethereumSignMessage({\n                path: this._pathFromAddress(withAccount),\n                message: ethUtil.stripHexPrefix(message),\n                hex: true,\n              })\n                .then((response) => {\n                  if (response.success) {\n                    if (\n                      response.payload.address !==\n                      ethUtil.toChecksumAddress(withAccount)\n                    ) {\n                      reject(\n                        new Error('signature doesnt match the right address'),\n                      );\n                    }\n                    const signature = `0x${response.payload.signature}`;\n                    resolve(signature);\n                  } else {\n                    reject(\n                      new Error(\n                        (response.payload && response.payload.error) ||\n                          'Unknown error',\n                      ),\n                    );\n                  }\n                })\n                .catch((e) => {\n                  reject(new Error((e && e.toString()) || 'Unknown error'));\n                });\n              // This is necessary to avoid popup collision\n              // between the unlock & sign Secux popups\n            },\n            status === 'just unlocked' ? DELAY_BETWEEN_POPUPS : 0,\n          );\n        })\n        .catch((e) => {\n          reject(new Error((e && e.toString()) || 'Unknown error'));\n        });\n    });\n  }\n\n  signTypedData() {\n    // Waiting on Secux to enable this\n    return Promise.reject(new Error('Not supported on this device'));\n  }\n\n  exportAccount() {\n    return Promise.reject(new Error('Not supported on this device'));\n  }\n\n  forgetDevice() {\n    this.accounts = [];\n    this.hdk = new HDKey();\n    this.page = 0;\n    this.unlockedAccount = 0;\n    this.paths = {};\n  }\n\n  /* PRIVATE METHODS */\n\n  _normalize(buf) {\n    return ethUtil.bufferToHex(buf).toString();\n  }\n\n  // eslint-disable-next-line no-shadow\n  _addressFromIndex(pathBase, i) {\n    const dkey = this.hdk.derive(`${pathBase}/${i}`);\n    const address = ethUtil\n      .publicToAddress(dkey.publicKey, true)\n      .toString('hex');\n    return ethUtil.toChecksumAddress(`0x${address}`);\n  }\n\n  _pathFromAddress(address) {\n    const checksummedAddress = ethUtil.toChecksumAddress(address);\n    let index = this.paths[checksummedAddress];\n    if (typeof index === 'undefined') {\n      for (let i = 0; i < MAX_INDEX; i++) {\n        if (checksummedAddress === this._addressFromIndex(pathBase, i)) {\n          index = i;\n          break;\n        }\n      }\n    }\n\n    if (typeof index === 'undefined') {\n      throw new Error('Unknown address');\n    }\n    return `${this.hdPath}/${index}`;\n  }\n}\n\nSecuxKeyring.type = keyringType;\n"]}